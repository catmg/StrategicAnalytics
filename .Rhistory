//CREATE  (address)-[:ADDRACC]->(account)
SET address.name = line.AddressMetricKey)
//Create Email Node if Model Key for Email is present
FOREACH (n IN earray |
MERGE (email:Email {key: UPPER(line.EmailMetricKey)})
CREATE  (account)-[:ACCEMAIL]->(email)
//CREATE  (email)-[:EMAILACC]->(account)
SET email.name = line.EmailMetricKey)
//Create Enrollment Node if Model Key for Enrollment is present
FOREACH (n IN narray |
MERGE (enrollment:Enrollment {key: UPPER(line.EnrollmentMetricKey)})
CREATE  (account)-[:ACCENROLL]->(enrollment)
//CREATE  (enrollment)-[:ENROLLACC]->(account)
SET enrollment.name = line.EnrollmentMetricKey)
//Create SoundEx Node if Model Key for SoundEx is present
FOREACH (n IN sarray |
MERGE (soundex:SoundEx {key: UPPER(line.SoundExMetricKey)})
CREATE  (account)-[:ACCSOUND]->(soundex)
//CREATE  (soundex)-[:SOUNDACC]->(account)
SET soundex.name = line.SoundExMetricKey)
;
"
cypher(graph, query)
clear(graph, input = TRUE)
clear(graph, input = TRUE)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
clear(graph, input = TRUE)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
clear(graph, input = TRUE)
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
clear(graph, input = TRUE)
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
clear(graph, input = TRUE)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
clear(graph, input = TRUE)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
clear(graph, input = TRUE)
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
clear(graph, input = TRUE)
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
clear(graph, input = TRUE)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
# query = "
# CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
# "
# cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
getConstraint(graph)
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
query = "
CREATE  CONSTRAINT ON (a:Account) ASSERT a.number IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (c:Carrier) ASSERT c.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (p:Phone) ASSERT p.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (a:Address) ASSERT a.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (s:SoundEx) ASSERT s.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (e:Email) ASSERT e.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (l:Claim) ASSERT l.key IS UNIQUE;
"
cypher(graph, query)
query = "
CREATE  CONSTRAINT ON (n:Enrollment) ASSERT n.key IS UNIQUE;
"
cypher(graph, query)
#show contraints
getConstraint(graph)
#Clear Workspace
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(cache=FALSE)
#Set Max memory size
memory.limit(size=70000)
library(RNeo4j)
library(igraph)
library(visNetwork)
load("U:\\USRDATA\\Documents\\R projects\\Dynamic Claim Management\\GraphDB.Rda")
nodes = data.frame(label=unique(c(edges$from, edges$to)))
#It alse requires the label column
nodes$id = nodes$label
head(nodes)
ig <- graph_from_data_frame(edges, directed = T)
clusters <- cluster_edge_betweenness(ig)
length(clusters)
nodes$group <- as.factor(clusters$membership)
nodes$value <- betweenness(ig)
head(nodes)
visNetwork(nodes,edges, width = "100%") %>% visInteraction(navigationButtons = TRUE)
#Clear Workspace
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(cache=FALSE)
#Set Max memory size
memory.limit(size=70000)
load("U:\\USRDATA\\Documents\\R projects\\Dynamic Claim Management\\GraphDB.Rda")
View(edges)
nodes = data.frame(label=unique(c(edges$from, edges$to)))
#It alse requires the label column
nodes$id = nodes$label
ig <- graph_from_data_frame(edges, directed = T)
clusters <- cluster_edge_betweenness(ig)
length(clusters)
library(RNeo4j)
library(igraph)
library(visNetwork)
nodes$id = nodes$label
head(nodes)
ig <- graph_from_data_frame(edges, directed = T)
clusters <- cluster_edge_betweenness(ig)
length(clusters)
nodes$group <- as.factor(clusters$membership)
nodes$value <- betweenness(ig)
visNetwork(nodes,edges, width = "100%") %>% visInteraction(navigationButtons = TRUE)
visNetwork(nodes, edges) %>%
visInteraction(hideEdgesOnDrag = FALSE, selectConnectedEdges = TRUE)
# with defaut layout
visNetwork(nodes, edges) %>%
visIgraphLayout() %>%
visNodes(size = 10)
library(visNetwork)
# with defaut layout
visNetwork(nodes, edges) %>%
visIgraphLayout() %>%
visNodes(size = 10)
visNetwork(nodes, edges) %>%
visIgraphLayout(physics = TRUE, smooth = TRUE) %>%
visNodes(size = 10)
library(visNetwork)
library(igraph)
library(RNeo4j)
visNetwork(nodes, edges) %>%
visIgraphLayout(physics = TRUE, smooth = TRUE) %>%
visNodes(size = 10)
library(RNeo4j)
graph = startGraph("http://localhost:7474/db/data",
username = "neo4j",
password = "Andres10")
getConstraint(graph)
utils:::menuInstallPkgs()
q()
# Change the value `FALSE` to `TRUE` and run the code chunk.
library(knitr)
#### Specify working directories. Change as needed. ####
# Rep-Res-Parent.Rnw
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/"
# README.Rmd
SetupDirectory <- "/git_repositories/Rep-Res-Book/"
##### Create PDF Book Manuscript ####
# Compile the book's parent document
setwd(ParentDirectory)
library(knitr)
#### Specify working directories. Change as needed. ####
# Rep-Res-Parent.Rnw
#ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/"
ParentDirectory <- "/Users/zd6943/Desktop/GitHub/Rep-Res-Book-master/Source/"
# README.Rmd
#SetupDirectory <- "/git_repositories/Rep-Res-Book/"
SetupDirectory <- "/Users/zd6943/Desktop/GitHub/Rep-Res-Book-master/"
##### Create PDF Book Manuscript ####
# Compile the book's parent document
setwd(ParentDirectory)
ParentDirectory <- "C:/Users/zd6943/Desktop/GitHub/Rep-Res-Book-master/Source/"
setwd(ParentDirectory)
SetupDirectory <- "C:/Users/zd6943/Desktop/GitHub/Rep-Res-Book-master/"
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
getwd()
SetupDirectory <- "C:/Users/zd6943/Desktop/GitHub/Rep-Res-ExampleProject1-master/"
setwd(ParentDirectory)
getwd()
setwd(SetupDirectory)
getwd()
library(knitr)
knit2pdf("Article.Rnw")
install.packages("framed")
install.packages("framed", dependencies=TRUE, repos='http://cran.rstudio.com/')
options(download.file.method = "wget")
install.packages("framed", dependencies=TRUE, repos='http://cran.rstudio.com/')
# Load knitr package
require(knitr)
require(markdown)
# Set your working directory
setwd("C:/Users/zd6943/Desktop/GitHub/StrategicAnalytics/")
# Gather and cleanup raw data files.
source("./StrategicAnalytics/Gather1.R")
####Execute quiz module 1
#knitr::knit2pdf(input = "./StrategicAnalytics/QuizModule1.rmd")
#rmarkdown::render("./StrategicAnalytics/QuizModule1.rmd")
# Create .md, .html, and .pdf files
knit("./StrategicAnalytics/QuizModule1.rmd")
markdownToHTML('QuizModule1.md', 'QuizModule1.html', options = c("use_xhml"))
system("pandoc -s QuizModule1.html -o QuizModule1.pdf")
require(ezknitr)
install.packages("ezknitr")
install.packages("ezknitr")
devtools::install_github("daattali/ezknitr")
require(ezknitr)
ezknit(file = "./StrategicAnalytics/QuizModule1.rmd", out_dir = "reports")
rmarkdown::render("./StrategicAnalytics/QuizModule1.rmd", "pdf_document")
rmarkdown::render("./StrategicAnalytics/QuizModule1.rmd", "pdf_document")
